//	Copyright © 2010, EPSITEC SA, CH-1400 Yverdon-les-Bains, Switzerland
//	Author: Daniel ROUX, Maintainer: Daniel ROUX

using Epsitec.Common.Types;

using Epsitec.Cresus.Core;
using Epsitec.Cresus.Core.Entities;
using Epsitec.Cresus.Core.Business;

using Epsitec.Cresus.Compta.Controllers;
using Epsitec.Cresus.Compta.Entities;

using System.Collections.Generic;
using System.Linq;

namespace Epsitec.Cresus.Compta.Accessors
{
	/// <summary>
	/// Gère l'accès aux données du compte d'exploitation de la comptabilité.
	/// </summary>
	public class ExploitationDataAccessor : AbstractDataAccessor
	{
		public ExploitationDataAccessor(BusinessContext businessContext, ComptaEntity comptaEntity, MainWindowController mainWindowController)
			: base (businessContext, comptaEntity, mainWindowController)
		{
			this.options = this.mainWindowController.GetSettingsOptions<ExploitationOptions> ("Présentation.ExploitationOptions", this.comptaEntity);

			this.UpdateAfterOptionsChanged ();
		}


		public override void UpdateAfterOptionsChanged()
		{
			this.readonlyData.Clear ();

			this.comptaEntity.PlanComptableUpdate (this.options.DateDébut, this.options.DateFin);

			//	Cherche les comptes d'exploitation à prendre en compte.
			var hash = new HashSet<FormattedText> ();

			foreach (var compte in this.comptaEntity.PlanComptable)
			{
				if (compte.Type != TypeDeCompte.Normal)
				{
					continue;
				}

				if (compte.Catégorie != CatégorieDeCompte.Actif  &&
					compte.Catégorie != CatégorieDeCompte.Passif &&
					compte.Catégorie != CatégorieDeCompte.Charge &&
					compte.Catégorie != CatégorieDeCompte.Produit)
				{
					continue;
				}

				if (compte.CompteOuvBoucl == null || compte.CompteOuvBoucl.Numéro.IsNullOrEmpty)
				{
					continue;
				}

				hash.Add (compte.CompteOuvBoucl.Numéro);
			}

			//	Génère la liste.
			foreach (var compte in this.comptaEntity.PlanComptable.Where (x => x.Catégorie == CatégorieDeCompte.Exploitation && x.Type == TypeDeCompte.Normal && hash.Contains (x.Numéro)).OrderBy (x => x.Numéro))
			{
				var data = new ExploitationData ();

				data.Numéro = compte.Numéro;
				data.Titre  = compte.Titre;
				data.IsBold = true;

				this.readonlyData.Add (data);

				decimal sousTotal = 0;
				int lineCount = 0;

				foreach (var compteLié in this.comptaEntity.PlanComptable.Where (x => x.CompteOuvBoucl != null && x.CompteOuvBoucl.Numéro == compte.Numéro).OrderBy (x => x.Numéro))
				{
					var solde = this.comptaEntity.GetSoldeCompte (compteLié);

					if (!this.Options.ComptesNuls && solde.GetValueOrDefault () == 0)
					{
						continue;
					}

					data = new ExploitationData ();

					data.Numéro = compteLié.Numéro;
					data.Titre  = compteLié.Titre;
					data.Solde  = solde;

					this.readonlyData.Add (data);

					sousTotal += solde.GetValueOrDefault ();
					lineCount++;
				}

				this.SetBottomSeparatorToPreviousLine ();

				//	Dernière ligne de total
				if (lineCount == 0)
				{
					data.Solde = 0;
				}
				else
				{
					var dataLié = new ExploitationData ();

					dataLié.Titre  = "Total";
					dataLié.Solde  = sousTotal;
					dataLié.IsBold = true;

					this.readonlyData.Add (dataLié);
				}

				this.readonlyData.Add (new ExploitationData ());  // ligne vide
			}
		}


		public override FormattedText GetText(int row, ColumnType column, bool all = false)
		{
			var data = this.GetReadOnlyData (row, all) as ExploitationData;

			if (data == null)
			{
				return FormattedText.Null;
			}

			switch (column)
			{
				case ColumnType.Numéro:
					return data.Numéro;

				case ColumnType.Titre:
					return data.Titre;

				case ColumnType.Solde:
					return AbstractDataAccessor.GetMontant (data.Solde);

				default:
					return FormattedText.Null;
			}
		}


		private ExploitationOptions Options
		{
			get
			{
				return this.options as ExploitationOptions;
			}
		}
	}
}