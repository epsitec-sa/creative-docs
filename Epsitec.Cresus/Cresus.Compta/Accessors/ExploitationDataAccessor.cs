//	Copyright © 2010, EPSITEC SA, CH-1400 Yverdon-les-Bains, Switzerland
//	Author: Daniel ROUX, Maintainer: Daniel ROUX

using Epsitec.Common.Types;

using Epsitec.Cresus.Compta.Controllers;
using Epsitec.Cresus.Compta.Entities;
using Epsitec.Cresus.Compta.Helpers;
using Epsitec.Cresus.Compta.Search.Data;
using Epsitec.Cresus.Compta.Options.Data;

using System.Collections.Generic;
using System.Linq;

namespace Epsitec.Cresus.Compta.Accessors
{
	/// <summary>
	/// Gère l'accès aux données du compte d'exploitation de la comptabilité.
	/// </summary>
	public class ExploitationDataAccessor : AbstractDataAccessor
	{
		public ExploitationDataAccessor(AbstractController controller)
			: base (controller)
		{
			this.viewSettingsList = this.mainWindowController.GetViewSettingsList ("Présentation.Exploitation.ViewSettings");
			this.searchData = this.mainWindowController.GetSettingsSearchData ("Présentation.Exploitation.Search");
			this.filterData = this.viewSettingsList.Selected.CurrentFilter;
			this.options    = this.viewSettingsList.Selected.CurrentOptions;

			this.UpdateAfterOptionsChanged ();
		}


		public override void UpdateFilter()
		{
			this.UpdateReadonlyAllData ();
		}

		public override void UpdateAfterOptionsChanged()
		{
			this.UpdateReadonlyAllData ();

			base.UpdateAfterOptionsChanged ();
		}

		private void UpdateReadonlyAllData()
		{
			this.readonlyAllData.Clear ();

			this.filterData.GetBeginnerDates (out this.lastBeginDate, out this.lastEndDate);
			this.mainWindowController.TemporalData.MergeDates (ref this.lastBeginDate, ref this.lastEndDate);
			this.soldesJournalManager.Initialize (this.période.Journal, this.lastBeginDate, this.lastEndDate);

			//	Cherche les comptes d'exploitation à prendre en compte.
			var hash = new HashSet<FormattedText> ();

			foreach (var compte in this.compta.PlanComptable)
			{
				if (compte.Type != TypeDeCompte.Normal)
				{
					continue;
				}

				if (compte.Catégorie != CatégorieDeCompte.Actif  &&
					compte.Catégorie != CatégorieDeCompte.Passif &&
					compte.Catégorie != CatégorieDeCompte.Charge &&
					compte.Catégorie != CatégorieDeCompte.Produit)
				{
					continue;
				}

				if (compte.CompteOuvBoucl == null || compte.CompteOuvBoucl.Numéro.IsNullOrEmpty)
				{
					continue;
				}

				hash.Add (compte.CompteOuvBoucl.Numéro);
			}

			//	Génère la liste.
			foreach (var compte in this.compta.PlanComptable.Where (x => x.Catégorie == CatégorieDeCompte.Exploitation && x.Type == TypeDeCompte.Normal && hash.Contains (x.Numéro)))
			{
				var dataTitre = new ExploitationData
				{
					Entity        = compte,
					Numéro        = compte.Numéro,
					Titre         = compte.Titre,
					IsBold        = true,
					NeverFiltered = true,
				};

				this.readonlyAllData.Add (dataTitre);

				decimal sousTotal = 0;
				int lineCount = 0;

				foreach (var compteLié in this.compta.PlanComptable.Where (x => x.CompteOuvBoucl != null && x.CompteOuvBoucl.Numéro == compte.Numéro))
				{
					var solde = this.soldesJournalManager.GetSolde (compteLié).GetValueOrDefault ();

					var data = new ExploitationData
					{
						Entity = compteLié,
						Numéro = compteLié.Numéro,
						Titre  = compteLié.Titre,
						Solde  = solde,
					};

					this.readonlyAllData.Add (data);

					sousTotal += solde;
					lineCount++;
				}

				this.SetBottomSeparatorToPreviousLine ();

				//	Dernière ligne de total
				if (lineCount == 0)
				{
					dataTitre.Solde              = 0;
					dataTitre.HasBottomSeparator = true;
				}
				else
				{
					var dataTotal = new ExploitationData
					{
						Titre              = "Total",
						Solde              = sousTotal,
						IsBold             = true,
						HasBottomSeparator = true,
						NeverFiltered      = true,
					};

					this.readonlyAllData.Add (dataTotal);
				}
			}

			base.UpdateFilter ();
		}


		public override FormattedText GetText(int row, ColumnType column, bool all = false)
		{
			var data = this.GetReadOnlyData (row, all) as ExploitationData;

			if (data == null)
			{
				return FormattedText.Null;
			}

			var compte = data.Entity as ComptaCompteEntity;

			ComptaMonnaieEntity monnaie = null;

			if (compte == null)
			{
				monnaie = this.compta.Monnaies[0];
			}
			else
			{
				monnaie = compte.Monnaie;
			}

			switch (column)
			{
				case ColumnType.Numéro:
					return data.Numéro;

				case ColumnType.Titre:
					return data.Titre;

				case ColumnType.Solde:
					return Converters.MontantToString (data.Solde, monnaie);

				default:
					return FormattedText.Null;
			}
		}


		private new ExploitationOptions Options
		{
			get
			{
				return this.options as ExploitationOptions;
			}
		}
	}
}