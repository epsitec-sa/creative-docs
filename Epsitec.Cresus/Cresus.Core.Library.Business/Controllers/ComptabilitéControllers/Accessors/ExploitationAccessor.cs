//	Copyright © 2010, EPSITEC SA, CH-1400 Yverdon-les-Bains, Switzerland
//	Author: Daniel ROUX, Maintainer: Daniel ROUX

using Epsitec.Common.Types;

using Epsitec.Cresus.Core;
using Epsitec.Cresus.Core.Entities;
using Epsitec.Cresus.Core.Business.Finance;
using Epsitec.Cresus.Core.Business.Finance.Comptabilité;

using System.Collections.Generic;
using System.Linq;

namespace Epsitec.Cresus.Core.Controllers.ComptabilitéControllers
{
	/// <summary>
	/// Gère l'accès aux données du compte d'exploitation de la comptabilité.
	/// </summary>
	public class ExploitationAccessor : AbstractDataAccessor<ExploitationColumn, ExploitationData>
	{
		public ExploitationAccessor(ComptabilitéEntity comptabilitéEntity)
			: base (comptabilitéEntity)
		{
			this.options = new ExploitationOptions (this.comptabilitéEntity);

			this.UpdateSortedList ();
		}


		public override void UpdateSortedList()
		{
			this.sortedEntities = new List<ExploitationData> ();

			//	Cherche les comptes d'exploitation à prendre en compte.
			var hash = new HashSet<FormattedText> ();

			foreach (var compte in this.comptabilitéEntity.PlanComptable)
			{
				if (compte.Type != TypeDeCompte.Normal)
				{
					continue;
				}

				if (compte.Catégorie != CatégorieDeCompte.Actif  &&
					compte.Catégorie != CatégorieDeCompte.Passif &&
					compte.Catégorie != CatégorieDeCompte.Charge &&
					compte.Catégorie != CatégorieDeCompte.Produit)
				{
					continue;
				}

				if (compte.CompteOuvBoucl == null || compte.CompteOuvBoucl.Numéro.IsNullOrEmpty)
				{
					continue;
				}

				hash.Add (compte.CompteOuvBoucl.Numéro);
			}

			//	Génère la liste.
			foreach (var compte in this.comptabilitéEntity.PlanComptable.Where (x => x.Catégorie == CatégorieDeCompte.Exploitation && x.Type == TypeDeCompte.Normal && hash.Contains (x.Numéro)).OrderBy (x => x.Numéro))
			{
				var data = new ExploitationData ();

				data.Numéro = compte.Numéro;
				data.Titre  = compte.Titre;
				data.IsBold = true;

				this.sortedEntities.Add (data);

				decimal sousTotal = 0;
				int lineCount = 0;

				foreach (var compteLié in this.comptabilitéEntity.PlanComptable.Where (x => x.CompteOuvBoucl != null && x.CompteOuvBoucl.Numéro == compte.Numéro).OrderBy (x => x.Numéro))
				{
					var solde = this.comptabilitéEntity.GetSoldeCompte (compteLié, this.options.DateDébut, this.options.DateFin);

					if (!this.Options.ComptesNuls && solde.GetValueOrDefault () == 0)
					{
						continue;
					}

					data = new ExploitationData ();

					data.Numéro = compteLié.Numéro;
					data.Titre  = compteLié.Titre;
					data.Solde  = solde;

					this.sortedEntities.Add (data);

					sousTotal += solde.GetValueOrDefault ();
					lineCount++;
				}

				//	Dernière ligne de total
				if (lineCount == 0)
				{
					data.Solde = 0;
				}
				else
				{
					var dataLié = new ExploitationData ();

					dataLié.Titre  = "Total";
					dataLié.Solde  = sousTotal;
					dataLié.IsBold = true;

					this.sortedEntities.Add (dataLié);
				}

				this.sortedEntities.Add (new ExploitationData ());  // ligne vide
			}
		}


		public override FormattedText GetText(int row, ExploitationColumn column)
		{
			if (row < 0 || row >= this.Count)
			{
				return FormattedText.Null;
			}

			var data = this.sortedEntities[row];

			switch (column)
			{
				case ExploitationColumn.Numéro:
					return data.Numéro;

				case ExploitationColumn.Titre:
					return data.Titre;

				case ExploitationColumn.Solde:
					return ExploitationAccessor.GetMontant (data.Solde);

				default:
					return FormattedText.Null;
			}
		}


		private static FormattedText GetMontant(decimal? montant)
		{
			if (montant.HasValue)
			{
				return montant.Value.ToString ("0.00");
			}
			else
			{
				return FormattedText.Empty;
			}
		}

		private ExploitationOptions Options
		{
			get
			{
				return this.options as ExploitationOptions;
			}
		}
	}
}