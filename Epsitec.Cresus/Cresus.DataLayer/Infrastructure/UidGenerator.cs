//	Copyright Â© 2010, EPSITEC SA, CH-1400 Yverdon-les-Bains, Switzerland
//	Author: Marc BETTEX, Maintainer: Marc BETTEX

using Epsitec.Common.Support.Extensions;

using Epsitec.Cresus.Database;

using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Linq;


namespace Epsitec.Cresus.DataLayer.Infrastructure
{


	/// <summary>
	/// The <c>UidGenerator</c> class allows the generation of unique ids. Each <c>UidGenerator</c>
	/// contains one or more slots which are each defined by a minimum and a maximum value. An
	/// <c>UidGenerator</c> can thus be used to generate unique ids in those slots.
	/// </summary>
	public sealed class UidGenerator
	{


		/// <summary>
		/// Creates a new instance of <c>UidGenerator</c>.
		/// </summary>
		/// <param name="uidManager">The <see cref="UidManager"/> used make uid operations in the database.</param>
		/// <param name="name">The name of this instance.</param>
		/// <param name="slots">The sequence of slots of this instance.</param>
		internal UidGenerator(UidManager uidManager, string name, IEnumerable<UidSlot> slots)
		{
			uidManager.ThrowIfNull ("uidManager");
			name.ThrowIfNullOrEmpty ("name");
			slots.ThrowIfNull ("slots");

			this.uidManager = uidManager;
			this.name = name;
			this.slots = slots.AsReadOnlyCollection ();

			this.slots.ThrowIf (s => s.IsEmpty (), "No slots defined.");

			for (int i = 0; i < this.slots.Count - 1; i++)
			{
				if (this.slots[i].MaxValue >= this.slots[i + 1].MinValue)
				{
					throw new System.ArgumentException ("Slots cannot overlap each others and must be ordered.");
				}
			}
		}

		/// <summary>
		/// The name of this instance.
		/// </summary>
		public string Name
		{
			get
			{
				return this.name;
			}
		}

		/// <summary>
		/// The sequence of slots of this instance.
		/// </summary>
		public ReadOnlyCollection<UidSlot> Slots
		{
			get
			{
				return this.slots;
			}
		}

		/// <summary>
		/// Gets the next unique id generated by this instance.
		/// </summary>
		/// <returns>The next unique id.</returns>
		/// <exception cref="System.Exception">If a new unique id cannot be generated.</exception>
		public long GetNextUid()
		{
			long? uid = this.uidManager.GetNextUid (this.name);

			if (!uid.HasValue)
			{
				throw new System.InvalidOperationException ("Could not create new unique id.");
			}

			return uid.Value;
		}


		private readonly string name;


		/// <summary>
		/// The sequence of slots.
		/// </summary>
		private readonly ReadOnlyCollection<UidSlot> slots;


		private readonly UidManager uidManager;


	}


}
